//队列本来是一个有序列表
//class queue, 成员变量是一个数据，MaxSize
//输入输出分辨从前后端来处理，因此分别用front和rear分别记录前后端的下标
//front会随着数据输出而变化（取数据的时候front改变）
//rear随着数据输入而改变
//把数据加入队列 "addQueue"，有两个步骤，指针往后移 rear+1, 必须先判断队列是否为空
//如果满足rear==maxSize-1 则队满，如果rear<maxSize-1则可以写入
import java.util.Scanner;

public class ArraryQueue{ //用数组模拟队列
  public static void main(String[] args){
    ArrayQueue Queue = new ArrayQueue(3);
    char key = ' '; //接收用户收入
    Scanner scanner = new Scanner(System.in); //可以接收
    boolean loop = true;
    
    while(loop){
      System.out.println("s(show): 显示队列");
      System.out.println("e(exit): 退出程序");
      System.out.println("a(add): 添加数据到队列");
      System.out.println("g(get): 从队列取出数据");
      System.out.println("h(head):查看队列头的数据");
      key = scanner.next().charAt(0);//接收一个字符
      switch(key){
        case 's':
          Queue.showQueue();
          break;
        case 'a':
          System.out.println("请输入一个数");
          int val = scanner.nextInt();
          Queue.addQueue(val);
          break;
        case 'g':
          try{
          int res = Queue.getQueue();
          System.out.printf("取出的数据是%d\n", res);
        }catch (Exception e){
          System.out.println(e.getMessage());
        }
        break;
        case 'h':
          try{
          int res = Queue.showHeadQueue();
          System.out.printf("得到的数据是%d\n", res);
        }catch (Exception e){
          System.out.println(e.getMessage());
        }
        break;
        case 'e':
          scanner.close();
          loop = false;
          break;
          
        default:
          break;
          
      }
           
      }
                        
  }
  
  //使用数组模拟队列-编写一个ArrayQueue的类、
  public static class ArrayQueue{
    private int maxSize; //数组的最大容量
    private int front; //队列头
    private int rear;  //队列尾
    private int[] arr; //该数组用来存放数据
  
    
    //创建队列的构造器
    public ArrayQueue(int maxSize){
      this.maxSize = maxSize;
      arr = new int[this.maxSize];
      front = -1; //指向队列头部，分析出front指向队列头的前一个位置
      rear = -1; //指向队列尾的具体位置（即就是队列最后一个数据）
    }
    
    //判断队列是否满
    public boolean isFull(){
      return (rear==maxSize-1);
      }
    
    //判断队列是否空
    public boolean isEmpty(){
      return (rear==front);}
    
    //入队
    public void addQueue(int val){
      if(isFull()){
        System.out.println("队列已满，不能添加元素");
        return;
      }else{
      rear++;
      arr[rear]=val;
    }
    }
    
    //出队
    public int getQueue(){
      if(isEmpty()){
        //通过抛出异常处理
        throw new RuntimeException("队列为空，不能取数据");
      }else{
        int val=0;
        front++;
        val=arr[front];
        return val;
      }
    }
      
    public void showQueue(){
      if(isEmpty()){
        System.out.println("队列空的，没有数据");
        return;
    }
      for(int i=0; i<arr.length; i++){
        System.out.printf("arr[%d]=%d\n",i,arr[i]);
      }
      
      
  }
    //显示队列的头数据，注意不是取数据
    public int showHeadQueue(){
      if(isEmpty()){
       throw new RuntimeException("队列为空无法取数据");
        
      }
      int val;
      val = arr[front+1];
      return val;
}
}
}
      
        
      
    
